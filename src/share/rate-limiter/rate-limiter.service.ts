import { v4 as uuid } from 'uuid'
import { Inject, Injectable } from "@nestjs/common";
import { LoggerTest } from './logger';
import Keyv from 'keyv';
import { RedisClientType } from 'redis';
import { RedisService } from '../components/redis';

// The weight of the logged requests is also stored in the Redis cache, so that the rate limiter can calculate the rate limit based on the weight of the requests made by the user.

// Requests are logged in a Redis cache with a key with the following format: rate-limit:{token}:{uuid}, where token is the API token or the IP address and uuid is an autogenerated UUID. The value of the key is the weight of the request.



@Injectable()
export class RateLimiterService {
    private redisClient: RedisClientType;

    constructor(
        private readonly redisService: RedisService,
        private logger: LoggerTest
    ) {
        this.redisClient = redisService.getClient()
    }


    async check(token: string, opts: { limit: number; weight?: number }) {
        const { limit, weight = 1 } = opts;

        //Search all keys in cache have `rate-limit...`

        const keys = await this.redisService.searchKeys(`rate-limit:${token}:*`);
        // this.logger.info(`Found keys: ${keys}`);

        //Duyet qua tat ca key, lay gia tri tuong ung
        //Kq tra ve mang values

        const values = await Promise.all(
            keys.map(async k => await this.redisClient.get(k))
        )
        // this.logger.info(`Values: ${values}`);


        //Lay ttl con lai cua tung key tu cache
        //tinh thoi gian con lai trc khi key het han

        const ttls = await Promise.all(
            keys.map(k => this.redisClient.ttl(k))
        )
        //  this.logger.info(`TTLs: ${ttls}`);


        //lay trong so lien quan den token

        const totalWeight = values.reduce((acc, val) => {
            const weight = Number(val);
            return isNaN(weight) ? acc : acc + weight;
        }, 0);
        // this.logger.info(`Total weight: ${totalWeight}`);


        //kiem tra vuot qua gioi han chua 
        const isOverLimit = totalWeight > limit


        //neu vuot qua gioi han thi thoi gian can doi den khi gioi han duoc bo la bao lau
        const secondsUntilLiftingLimit = isOverLimit ? Math.min(...ttls) : 0
        // this.logger.info(`Seconds until lifting limit: ${secondsUntilLiftingLimit}`);

        
        //chua vuot qua gioi han thi tao 1 key moi trong cache
        if (!isOverLimit) {
            const generatedUuid = uuid();
            const key = `rate-limit:${token}:${generatedUuid}`;
            await this.redisClient.set(key, weight, {
                EX: 60 * 60 * 10
            })
        }
        return {
            token,
            totalWeight,
            isOverLimit,
            secondsUntilLiftingLimit,
        }
    }
}